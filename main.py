from RetrievalAgent import WikipediaRetriever
from CorrectionAgent import Correction
from EmbeddingAgent import Embedding
from AnswerAgent import Answer
from GenratorAgent import Generator
import sys

#n'oublier pas la condition en cas topic nest pas mis
user_query = "elon musk"
correction_agent = Correction()
corrected_query = correction_agent.run(user_query)
if corrected_query is None:
        sys.exit("La requête corrigée est introuvable.")
else:
        print("Requête corrigée :", corrected_query)

retriever = WikipediaRetriever(lang='en')
result = retriever.fetch_article(corrected_query)


if result["status"] == "ok":
    print("success")
else:
    sys.exit(" Article indisponible ou trop court.")

report = Generator()
report.resume(result["raw_text"], corrected_query)


#division du paragraphe wikipidia en sections safe query contient nom de fichier du modele
splitter_agent = Embedding()
safe_query = splitter_agent.embed_and_index(result["raw_text"], corrected_query)
print(safe_query)



agent = Answer()

question = "how many kids does musk have?"
answers = agent.answer_question(question, safe_query)
print(f"\nQuestion : {question}\nRéponses probables :")
for ans in answers:
    print("→", ans)

final_response = agent.generate_llm_response(question, answers)
print("\nFinal Answer generated by the LLM:")
print("→", final_response)